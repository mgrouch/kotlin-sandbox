// License: GPL. For details, see LICENSE file.
package s57

import s57.S57att.Att
import s57.S57dat.S57field
import s57.S57obj.Obj

/**
 * @author Malcolm Herring
 * @author mgrouch
 */
object S57enc {

    private val header: ByteArray = byteArrayOf(
        '0'.code.toByte(),
        '1'.code.toByte(),
        '5'.code.toByte(),
        '7'.code.toByte(),
        '6'.code.toByte(),
        '3'.code.toByte(),
        'L'.code.toByte(),
        'E'.code.toByte(),
        '1'.code.toByte(),
        ' '.code.toByte(),
        '0'.code.toByte(),
        '9'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '2'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        ' '.code.toByte(),
        '!'.code.toByte(),
        ' '.code.toByte(),
        '3'.code.toByte(),
        '4'.code.toByte(),
        '0'.code.toByte(),
        '4'.code.toByte(),  // Leader
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        '3'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        '0'.code.toByte(),
        '4'.code.toByte(),
        '7'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        '3'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        '1'.code.toByte(),
        '5'.code.toByte(),
        '9'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        '7'.code.toByte(),
        '0'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'S'.code.toByte(),
        'I'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        '3'.code.toByte(),
        '0'.code.toByte(),
        '3'.code.toByte(),
        '2'.code.toByte(),
        '9'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'P'.code.toByte(),
        'M'.code.toByte(),
        '1'.code.toByte(),
        '3'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '4'.code.toByte(),
        '4'.code.toByte(),
        '2'.code.toByte(),
        'F'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        '1'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '5'.code.toByte(),
        '7'.code.toByte(),
        '2'.code.toByte(),
        'F'.code.toByte(),
        'O'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        '0'.code.toByte(),
        '7'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '6'.code.toByte(),
        '7'.code.toByte(),
        '2'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'T'.code.toByte(),
        'F'.code.toByte(),
        '0'.code.toByte(),
        '5'.code.toByte(),
        '9'.code.toByte(),
        '0'.code.toByte(),
        '7'.code.toByte(),
        '4'.code.toByte(),
        '2'.code.toByte(),
        'N'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'F'.code.toByte(),
        '0'.code.toByte(),
        '6'.code.toByte(),
        '8'.code.toByte(),
        '0'.code.toByte(),
        '8'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        'F'.code.toByte(),
        'F'.code.toByte(),
        'P'.code.toByte(),
        'T'.code.toByte(),
        '0'.code.toByte(),
        '8'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '8'.code.toByte(),
        '6'.code.toByte(),
        '9'.code.toByte(),
        'F'.code.toByte(),
        'S'.code.toByte(),
        'P'.code.toByte(),
        'T'.code.toByte(),
        '0'.code.toByte(),
        '9'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '9'.code.toByte(),
        '5'.code.toByte(),
        '5'.code.toByte(),
        'V'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        '0'.code.toByte(),
        '7'.code.toByte(),
        '8'.code.toByte(),
        '1'.code.toByte(),
        '0'.code.toByte(),
        '4'.code.toByte(),
        '5'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'T'.code.toByte(),
        'V'.code.toByte(),
        '0'.code.toByte(),
        '5'.code.toByte(),
        '8'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        '3'.code.toByte(),
        'V'.code.toByte(),
        'R'.code.toByte(),
        'P'.code.toByte(),
        'T'.code.toByte(),
        '0'.code.toByte(),
        '7'.code.toByte(),
        '6'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        '8'.code.toByte(),
        '1'.code.toByte(),
        'S'.code.toByte(),
        'G'.code.toByte(),
        '2'.code.toByte(),
        'D'.code.toByte(),
        '0'.code.toByte(),
        '4'.code.toByte(),
        '8'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        '5'.code.toByte(),
        '7'.code.toByte(),
        'S'.code.toByte(),
        'G'.code.toByte(),
        '3'.code.toByte(),
        'D'.code.toByte(),
        '0'.code.toByte(),
        '7'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        '3'.code.toByte(),
        '0'.code.toByte(),
        '5'.code.toByte(),
        0x1e,  // File control field
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        0x1f,
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'S'.code.toByte(),
        'I'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'P'.code.toByte(),
        'M'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        'F'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'F'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'F'.code.toByte(),
        'O'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'F'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'T'.code.toByte(),
        'F'.code.toByte(),
        'F'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'N'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'F'.code.toByte(),
        'F'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'F'.code.toByte(),
        'F'.code.toByte(),
        'P'.code.toByte(),
        'T'.code.toByte(),
        'F'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'F'.code.toByte(),
        'S'.code.toByte(),
        'P'.code.toByte(),
        'T'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        '1'.code.toByte(),
        'V'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'V'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'T'.code.toByte(),
        'V'.code.toByte(),
        'V'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'V'.code.toByte(),
        'R'.code.toByte(),
        'P'.code.toByte(),
        'T'.code.toByte(),
        'V'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'G'.code.toByte(),
        '2'.code.toByte(),
        'D'.code.toByte(),
        'V'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'G'.code.toByte(),
        '3'.code.toByte(),
        'D'.code.toByte(),
        0x1e,  // Record identifier fields
        '0'.code.toByte(),
        '5'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'I'.code.toByte(),
        'S'.code.toByte(),
        'O'.code.toByte(),
        '/'.code.toByte(),
        'I'.code.toByte(),
        'E'.code.toByte(),
        'C'.code.toByte(),
        ' '.code.toByte(),
        '8'.code.toByte(),
        '2'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ' '.code.toByte(),
        'R'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        'I'.code.toByte(),
        'd'.code.toByte(),
        'e'.code.toByte(),
        'n'.code.toByte(),
        't'.code.toByte(),
        'i'.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'r'.code.toByte(),
        0x1f,
        0x1f,
        '('.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '1'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'D'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'a'.code.toByte(),
        ' '.code.toByte(),
        'S'.code.toByte(),
        'e'.code.toByte(),
        't'.code.toByte(),
        ' '.code.toByte(),
        'I'.code.toByte(),
        'd'.code.toByte(),
        'e'.code.toByte(),
        'n'.code.toByte(),
        't'.code.toByte(),
        'i'.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'c'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'i'.code.toByte(),
        'o'.code.toByte(),
        'n'.code.toByte(),
        0x1f,
        'R'.code.toByte(),
        'C'.code.toByte(),
        'N'.code.toByte(),
        'M'.code.toByte(),
        '!'.code.toByte(),
        'R'.code.toByte(),
        'C'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        '!'.code.toByte(),
        'E'.code.toByte(),
        'X'.code.toByte(),
        'P'.code.toByte(),
        'P'.code.toByte(),
        '!'.code.toByte(),
        'I'.code.toByte(),
        'N'.code.toByte(),
        'T'.code.toByte(),
        'U'.code.toByte(),
        '!'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        'N'.code.toByte(),
        'M'.code.toByte(),
        '!'.code.toByte(),
        'E'.code.toByte(),
        'D'.code.toByte(),
        'T'.code.toByte(),
        'N'.code.toByte(),
        '!'.code.toByte(),
        'U'.code.toByte(),
        'P'.code.toByte(),
        'D'.code.toByte(),
        'N'.code.toByte(),
        '!'.code.toByte(),
        'U'.code.toByte(),
        'A'.code.toByte(),
        'D'.code.toByte(),
        'T'.code.toByte(),
        '!'.code.toByte(),
        'I'.code.toByte(),
        'S'.code.toByte(),
        'D'.code.toByte(),
        'T'.code.toByte(),
        '!'.code.toByte(),
        'S'.code.toByte(),
        'T'.code.toByte(),
        'E'.code.toByte(),
        'D'.code.toByte(),
        '!'.code.toByte(),
        'P'.code.toByte(),
        'R'.code.toByte(),
        'S'.code.toByte(),
        'P'.code.toByte(),
        '!'.code.toByte(),
        'P'.code.toByte(),
        'S'.code.toByte(),
        'D'.code.toByte(),
        'N'.code.toByte(),
        '!'.code.toByte(),
        'P'.code.toByte(),
        'R'.code.toByte(),
        'E'.code.toByte(),
        'D'.code.toByte(),
        '!'.code.toByte(),
        'P'.code.toByte(),
        'R'.code.toByte(),
        'O'.code.toByte(),
        'F'.code.toByte(),
        '!'.code.toByte(),
        'A'.code.toByte(),
        'G'.code.toByte(),
        'E'.code.toByte(),
        'N'.code.toByte(),
        '!'.code.toByte(),
        'C'.code.toByte(),
        'O'.code.toByte(),
        'M'.code.toByte(),
        'T'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '4'.code.toByte(),
        ','.code.toByte(),
        '2'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        '3'.code.toByte(),
        'A'.code.toByte(),
        ','.code.toByte(),
        '2'.code.toByte(),
        'A'.code.toByte(),
        '('.code.toByte(),
        '8'.code.toByte(),
        ')'.code.toByte(),
        ','.code.toByte(),
        'R'.code.toByte(),
        '('.code.toByte(),
        '4'.code.toByte(),
        ')'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        '2'.code.toByte(),
        'A'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        ','.code.toByte(),
        'A'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '1'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'D'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'a'.code.toByte(),
        ' '.code.toByte(),
        's'.code.toByte(),
        'e'.code.toByte(),
        't'.code.toByte(),
        ' '.code.toByte(),
        's'.code.toByte(),
        't'.code.toByte(),
        'r'.code.toByte(),
        'u'.code.toByte(),
        'c'.code.toByte(),
        't'.code.toByte(),
        'u'.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'i'.code.toByte(),
        'n'.code.toByte(),
        'f'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'm'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'i'.code.toByte(),
        'o'.code.toByte(),
        'n'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        'D'.code.toByte(),
        'S'.code.toByte(),
        'T'.code.toByte(),
        'R'.code.toByte(),
        '!'.code.toByte(),
        'A'.code.toByte(),
        'A'.code.toByte(),
        'L'.code.toByte(),
        'L'.code.toByte(),
        '!'.code.toByte(),
        'N'.code.toByte(),
        'A'.code.toByte(),
        'L'.code.toByte(),
        'L'.code.toByte(),
        '!'.code.toByte(),
        'N'.code.toByte(),
        'O'.code.toByte(),
        'M'.code.toByte(),
        'R'.code.toByte(),
        '!'.code.toByte(),
        'N'.code.toByte(),
        'O'.code.toByte(),
        'C'.code.toByte(),
        'R'.code.toByte(),
        '!'.code.toByte(),
        'N'.code.toByte(),
        'O'.code.toByte(),
        'G'.code.toByte(),
        'R'.code.toByte(),
        '!'.code.toByte(),
        'N'.code.toByte(),
        'O'.code.toByte(),
        'L'.code.toByte(),
        'R'.code.toByte(),
        '!'.code.toByte(),
        'N'.code.toByte(),
        'O'.code.toByte(),
        'I'.code.toByte(),
        'N'.code.toByte(),
        '!'.code.toByte(),
        'N'.code.toByte(),
        'O'.code.toByte(),
        'C'.code.toByte(),
        'N'.code.toByte(),
        '!'.code.toByte(),
        'N'.code.toByte(),
        'O'.code.toByte(),
        'E'.code.toByte(),
        'D'.code.toByte(),
        '!'.code.toByte(),
        'N'.code.toByte(),
        'O'.code.toByte(),
        'F'.code.toByte(),
        'A'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        '3'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        '8'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '4'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '1'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'D'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'a'.code.toByte(),
        ' '.code.toByte(),
        's'.code.toByte(),
        'e'.code.toByte(),
        't'.code.toByte(),
        ' '.code.toByte(),
        'p'.code.toByte(),
        'a'.code.toByte(),
        'r'.code.toByte(),
        'a'.code.toByte(),
        'm'.code.toByte(),
        'e'.code.toByte(),
        't'.code.toByte(),
        'e'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        'R'.code.toByte(),
        'C'.code.toByte(),
        'N'.code.toByte(),
        'M'.code.toByte(),
        '!'.code.toByte(),
        'R'.code.toByte(),
        'C'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        '!'.code.toByte(),
        'H'.code.toByte(),
        'D'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        '!'.code.toByte(),
        'V'.code.toByte(),
        'D'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        '!'.code.toByte(),
        'S'.code.toByte(),
        'D'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        '!'.code.toByte(),
        'C'.code.toByte(),
        'S'.code.toByte(),
        'C'.code.toByte(),
        'L'.code.toByte(),
        '!'.code.toByte(),
        'D'.code.toByte(),
        'U'.code.toByte(),
        'N'.code.toByte(),
        'I'.code.toByte(),
        '!'.code.toByte(),
        'H'.code.toByte(),
        'U'.code.toByte(),
        'N'.code.toByte(),
        'I'.code.toByte(),
        '!'.code.toByte(),
        'P'.code.toByte(),
        'U'.code.toByte(),
        'N'.code.toByte(),
        'I'.code.toByte(),
        '!'.code.toByte(),
        'C'.code.toByte(),
        'O'.code.toByte(),
        'U'.code.toByte(),
        'N'.code.toByte(),
        '!'.code.toByte(),
        'C'.code.toByte(),
        'O'.code.toByte(),
        'M'.code.toByte(),
        'F'.code.toByte(),
        '!'.code.toByte(),
        'S'.code.toByte(),
        'O'.code.toByte(),
        'M'.code.toByte(),
        'F'.code.toByte(),
        '!'.code.toByte(),
        'C'.code.toByte(),
        'O'.code.toByte(),
        'M'.code.toByte(),
        'T'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '4'.code.toByte(),
        ','.code.toByte(),
        '3'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '4'.code.toByte(),
        ','.code.toByte(),
        '4'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        '2'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '4'.code.toByte(),
        ','.code.toByte(),
        'A'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '1'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'F'.code.toByte(),
        'e'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'u'.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        'i'.code.toByte(),
        'd'.code.toByte(),
        'e'.code.toByte(),
        'n'.code.toByte(),
        't'.code.toByte(),
        'i'.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        'R'.code.toByte(),
        'C'.code.toByte(),
        'N'.code.toByte(),
        'M'.code.toByte(),
        '!'.code.toByte(),
        'R'.code.toByte(),
        'C'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        '!'.code.toByte(),
        'P'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'M'.code.toByte(),
        '!'.code.toByte(),
        'G'.code.toByte(),
        'R'.code.toByte(),
        'U'.code.toByte(),
        'P'.code.toByte(),
        '!'.code.toByte(),
        'O'.code.toByte(),
        'B'.code.toByte(),
        'J'.code.toByte(),
        'L'.code.toByte(),
        '!'.code.toByte(),
        'R'.code.toByte(),
        'V'.code.toByte(),
        'E'.code.toByte(),
        'R'.code.toByte(),
        '!'.code.toByte(),
        'R'.code.toByte(),
        'U'.code.toByte(),
        'I'.code.toByte(),
        'N'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '4'.code.toByte(),
        ','.code.toByte(),
        '2'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        '2'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '1'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'F'.code.toByte(),
        'e'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'u'.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'o'.code.toByte(),
        'b'.code.toByte(),
        'j'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        't'.code.toByte(),
        ' '.code.toByte(),
        'i'.code.toByte(),
        'd'.code.toByte(),
        'e'.code.toByte(),
        'n'.code.toByte(),
        't'.code.toByte(),
        'i'.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        'A'.code.toByte(),
        'G'.code.toByte(),
        'E'.code.toByte(),
        'N'.code.toByte(),
        '!'.code.toByte(),
        'F'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'N'.code.toByte(),
        '!'.code.toByte(),
        'F'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        'S'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '4'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '2'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        '-'.code.toByte(),
        'A'.code.toByte(),
        ' '.code.toByte(),
        'F'.code.toByte(),
        'e'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'u'.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        't'.code.toByte(),
        'r'.code.toByte(),
        'i'.code.toByte(),
        'b'.code.toByte(),
        'u'.code.toByte(),
        't'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        '*'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'T'.code.toByte(),
        'L'.code.toByte(),
        '!'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'V'.code.toByte(),
        'L'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        ','.code.toByte(),
        'A'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '2'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        '-'.code.toByte(),
        'A'.code.toByte(),
        ' '.code.toByte(),
        'F'.code.toByte(),
        'e'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'u'.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        'n'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'i'.code.toByte(),
        'o'.code.toByte(),
        'n'.code.toByte(),
        'a'.code.toByte(),
        'l'.code.toByte(),
        ' '.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        't'.code.toByte(),
        'r'.code.toByte(),
        'i'.code.toByte(),
        'b'.code.toByte(),
        'u'.code.toByte(),
        't'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        '*'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'T'.code.toByte(),
        'L'.code.toByte(),
        '!'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'V'.code.toByte(),
        'L'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        ','.code.toByte(),
        'A'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '2'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'F'.code.toByte(),
        'e'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'u'.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        't'.code.toByte(),
        'o'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'e'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'u'.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'o'.code.toByte(),
        'b'.code.toByte(),
        'j'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        't'.code.toByte(),
        ' '.code.toByte(),
        'p'.code.toByte(),
        'o'.code.toByte(),
        'i'.code.toByte(),
        'n'.code.toByte(),
        't'.code.toByte(),
        'e'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        '*'.code.toByte(),
        'L'.code.toByte(),
        'N'.code.toByte(),
        'A'.code.toByte(),
        'M'.code.toByte(),
        '!'.code.toByte(),
        'R'.code.toByte(),
        'I'.code.toByte(),
        'N'.code.toByte(),
        'D'.code.toByte(),
        '!'.code.toByte(),
        'C'.code.toByte(),
        'O'.code.toByte(),
        'M'.code.toByte(),
        'T'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'B'.code.toByte(),
        '('.code.toByte(),
        '6'.code.toByte(),
        '4'.code.toByte(),
        ')'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        'A'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '2'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'F'.code.toByte(),
        'e'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'u'.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        't'.code.toByte(),
        'o'.code.toByte(),
        ' '.code.toByte(),
        's'.code.toByte(),
        'p'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'i'.code.toByte(),
        'a'.code.toByte(),
        'l'.code.toByte(),
        ' '.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        'p'.code.toByte(),
        'o'.code.toByte(),
        'i'.code.toByte(),
        'n'.code.toByte(),
        't'.code.toByte(),
        'e'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        '*'.code.toByte(),
        'N'.code.toByte(),
        'A'.code.toByte(),
        'M'.code.toByte(),
        'E'.code.toByte(),
        '!'.code.toByte(),
        'O'.code.toByte(),
        'R'.code.toByte(),
        'N'.code.toByte(),
        'T'.code.toByte(),
        '!'.code.toByte(),
        'U'.code.toByte(),
        'S'.code.toByte(),
        'A'.code.toByte(),
        'G'.code.toByte(),
        '!'.code.toByte(),
        'M'.code.toByte(),
        'A'.code.toByte(),
        'S'.code.toByte(),
        'K'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'B'.code.toByte(),
        '('.code.toByte(),
        '4'.code.toByte(),
        '0'.code.toByte(),
        ')'.code.toByte(),
        ','.code.toByte(),
        '3'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '1'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'V'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        't'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        'i'.code.toByte(),
        'd'.code.toByte(),
        'e'.code.toByte(),
        'n'.code.toByte(),
        't'.code.toByte(),
        'i'.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        'R'.code.toByte(),
        'C'.code.toByte(),
        'N'.code.toByte(),
        'M'.code.toByte(),
        '!'.code.toByte(),
        'R'.code.toByte(),
        'C'.code.toByte(),
        'I'.code.toByte(),
        'D'.code.toByte(),
        '!'.code.toByte(),
        'R'.code.toByte(),
        'V'.code.toByte(),
        'E'.code.toByte(),
        'R'.code.toByte(),
        '!'.code.toByte(),
        'R'.code.toByte(),
        'U'.code.toByte(),
        'I'.code.toByte(),
        'N'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '4'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        ','.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '2'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'V'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        't'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        't'.code.toByte(),
        'r'.code.toByte(),
        'i'.code.toByte(),
        'b'.code.toByte(),
        'u'.code.toByte(),
        't'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        '*'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'T'.code.toByte(),
        'L'.code.toByte(),
        '!'.code.toByte(),
        'A'.code.toByte(),
        'T'.code.toByte(),
        'V'.code.toByte(),
        'L'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '2'.code.toByte(),
        ','.code.toByte(),
        'A'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '2'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        'V'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        't'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'r'.code.toByte(),
        'e'.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        ' '.code.toByte(),
        'p'.code.toByte(),
        'o'.code.toByte(),
        'i'.code.toByte(),
        'n'.code.toByte(),
        't'.code.toByte(),
        'e'.code.toByte(),
        'r'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        '*'.code.toByte(),
        'N'.code.toByte(),
        'A'.code.toByte(),
        'M'.code.toByte(),
        'E'.code.toByte(),
        '!'.code.toByte(),
        'O'.code.toByte(),
        'R'.code.toByte(),
        'N'.code.toByte(),
        'T'.code.toByte(),
        '!'.code.toByte(),
        'U'.code.toByte(),
        'S'.code.toByte(),
        'A'.code.toByte(),
        'G'.code.toByte(),
        '!'.code.toByte(),
        'T'.code.toByte(),
        'O'.code.toByte(),
        'P'.code.toByte(),
        'I'.code.toByte(),
        '!'.code.toByte(),
        'M'.code.toByte(),
        'A'.code.toByte(),
        'S'.code.toByte(),
        'K'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        'B'.code.toByte(),
        '('.code.toByte(),
        '4'.code.toByte(),
        '0'.code.toByte(),
        ')'.code.toByte(),
        ','.code.toByte(),
        '4'.code.toByte(),
        'b'.code.toByte(),
        '1'.code.toByte(),
        '1'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '2'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        '2'.code.toByte(),
        '-'.code.toByte(),
        'D'.code.toByte(),
        ' '.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        'i'.code.toByte(),
        'n'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        '*'.code.toByte(),
        'Y'.code.toByte(),
        'C'.code.toByte(),
        'O'.code.toByte(),
        'O'.code.toByte(),
        '!'.code.toByte(),
        'X'.code.toByte(),
        'C'.code.toByte(),
        'O'.code.toByte(),
        'O'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        '2'.code.toByte(),
        'b'.code.toByte(),
        '2'.code.toByte(),
        '4'.code.toByte(),
        ')'.code.toByte(),
        0x1e,
        '2'.code.toByte(),
        '6'.code.toByte(),
        '0'.code.toByte(),
        '0'.code.toByte(),
        ';'.code.toByte(),
        '&'.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        ' '.code.toByte(),
        '3'.code.toByte(),
        '-'.code.toByte(),
        'D'.code.toByte(),
        ' '.code.toByte(),
        'c'.code.toByte(),
        'o'.code.toByte(),
        'o'.code.toByte(),
        'r'.code.toByte(),
        'd'.code.toByte(),
        'i'.code.toByte(),
        'n'.code.toByte(),
        'a'.code.toByte(),
        't'.code.toByte(),
        'e'.code.toByte(),
        ' '.code.toByte(),
        '('.code.toByte(),
        's'.code.toByte(),
        'o'.code.toByte(),
        'u'.code.toByte(),
        'n'.code.toByte(),
        'd'.code.toByte(),
        'i'.code.toByte(),
        'n'.code.toByte(),
        'g'.code.toByte(),
        ' '.code.toByte(),
        'a'.code.toByte(),
        'r'.code.toByte(),
        'r'.code.toByte(),
        'a'.code.toByte(),
        'y'.code.toByte(),
        ')'.code.toByte(),
        ' '.code.toByte(),
        'f'.code.toByte(),
        'i'.code.toByte(),
        'e'.code.toByte(),
        'l'.code.toByte(),
        'd'.code.toByte(),
        0x1f,
        '*'.code.toByte(),
        'Y'.code.toByte(),
        'C'.code.toByte(),
        'O'.code.toByte(),
        'O'.code.toByte(),
        '!'.code.toByte(),
        'X'.code.toByte(),
        'C'.code.toByte(),
        'O'.code.toByte(),
        'O'.code.toByte(),
        '!'.code.toByte(),
        'V'.code.toByte(),
        'E'.code.toByte(),
        '3'.code.toByte(),
        'D'.code.toByte(),
        0x1f,
        '('.code.toByte(),
        '3'.code.toByte(),
        'b'.code.toByte(),
        '2'.code.toByte(),
        '4'.code.toByte(),
        ')'.code.toByte(),
        0x1e
    )
    const val COMF = 10000000.0
    const val SOMF = 10.0
    var file: String? = "0S000000.000"
    var intu = 0
    var code: String? = "0S"
    var agen = 3878
    var cscl = 10000
    var vdat = 23
    var duni = 1
    var huni = 1
    var idx = 0
    var recs = 0
    var isols = 0
    var conns = 0
    var metas = 0
    var geos = 0
    var edges = 0
    fun hash(`val`: Long): Long {
        val bval = ByteBuffer.allocate(java.lang.Long.SIZE).putLong(`val`).array()
        val crc = CRC32()
        crc.update(bval)
        return crc.value
    }

    fun encodeChart(map: S57map?, meta: HashMap<String?, String?>?, buf: ByteArray?): Int {
        for (entry in meta!!.entries) {
            try {
                when (entry.key) {
                    "FILE" -> file = entry.value
                    "INTU" -> intu = entry.value!!.toInt()
                    "AGEN" -> {
                        val tokens: Array<String?> = entry.value!!.split("/".toRegex()).dropLastWhile { it.isEmpty() }
                            .toTypedArray()
                        code = tokens[0]
                        agen = tokens[1]!!.toInt()
                    }
                    "VDAT" -> vdat = entry.value!!.toInt()
                    "CSCL" -> cscl = entry.value!!.toInt()
                    "DUNI" -> duni = entry.value!!.toInt()
                    "HUNI" -> huni = entry.value!!.toInt()
                }
            } catch (e: Exception) {
                System.err.println("Meta data (" + entry.key + "=" + entry.value + "):" + e.message)
                System.exit(-1)
            }
        }

        //M_COVR & MNSYS in BB if not in map
        if (!map!!.features!!.containsKey(Obj.M_COVR)) {
            S57osm.OSMmeta(map)
        }
        S57dat.S57geoms(map)
        var record: ByteArray?
        var fields: ArrayList<S57dat.Fparams>
        edges = 0
        geos = edges
        metas = geos
        conns = metas
        isols = conns
        val date = SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().time)
        var ds = arrayListOf(
            S57dat.Fparams(
                S57field.DSID,
                arrayOf<Any>(
                    10,
                    1,
                    1,
                    intu,
                    file,
                    "1",
                    "0",
                    date,
                    date,
                    "03.1",
                    1,
                    "ENC",
                    "2.0",
                    1,
                    agen,
                    "Generated by OpenSeaMap.org"
                )
            )
        )
        ds.add(S57dat.Fparams(S57field.DSSI, arrayOf(2, 1, 2, metas, 0, geos, 0, isols, conns, edges, 0)))
        val dp = ArrayList<S57dat.Fparams>()
        dp.add(
            S57dat.Fparams(
                S57field.DSPM,
                arrayOf(20, 2, 2, vdat, vdat, cscl, duni, huni, 1, 1, 10000000, 10, "")
            )
        )
        arraycopy(header, 0, buf, 0, header.size)
        idx = header.size
        record = S57dat.encRecord(1, ds)
        arraycopy(record, 0, buf, idx, record.size)
        idx += record.size
        record = S57dat.encRecord(2, dp)
        arraycopy(record, 0, buf, idx, record.size)
        idx += record.size
        recs = 3

        // Depths
        var depths: Array<Any?> = arrayOfNulls(0)
        for (entry in map.nodes!!.entries) {
            val node = entry.value
            if (node!!.flg == S57map.Nflag.DPTH) {
                val dval = arrayOf<Any?>(
                    rad2deg(node.lat) * COMF, rad2deg(node.lon) * COMF,
                    node.`val` * SOMF
                )
                depths = Arrays.copyOf(depths, depths.size + dval.size)
                arraycopy(dval, 0, depths, depths.size - dval.size, dval.size)
            }
        }
        if (depths.isNotEmpty()) {
            fields = ArrayList()
            fields.add(S57dat.Fparams(S57field.VRID, arrayOf(110, -2, 1, 1)))
            fields.add(S57dat.Fparams(S57field.SG3D, depths))
            record = S57dat.encRecord(recs++, fields)
            arraycopy(record, 0, buf, idx, record.size)
            idx += record.size
            isols++
        }

        // Isolated nodes
        for (entry in map.nodes!!.entries) {
            val node = entry.value
            if (node!!.flg == S57map.Nflag.ISOL) {
                fields = ArrayList()
                fields.add(S57dat.Fparams(S57field.VRID, arrayOf(110, hash(entry.key!!), 1, 1)))
                fields.add(
                    S57dat.Fparams(
                        S57field.SG2D, arrayOf(
                            rad2deg(node.lat) * COMF, rad2deg(node.lon) * COMF
                        )
                    )
                )
                record = S57dat.encRecord(recs++, fields)
                arraycopy(record, 0, buf, idx, record.size)
                idx += record.size
                isols++
            }
        }

        // Connected nodes
        for (entry in map.nodes!!.entries) {
            val node = entry.value
            if (node!!.flg == S57map.Nflag.CONN) {
                fields = ArrayList()
                fields.add(S57dat.Fparams(S57field.VRID, arrayOf(120, hash(entry.key!!), 1, 1)))
                fields.add(
                    S57dat.Fparams(
                        S57field.SG2D, arrayOf(
                            rad2deg(node.lat) * COMF, rad2deg(node.lon) * COMF
                        )
                    )
                )
                record = S57dat.encRecord(recs++, fields)
                arraycopy(record, 0, buf, idx, record.size)
                idx += record.size
                conns++
            }
        }

        // Edges
        for (entry in map.edges!!.entries) {
            val edge = entry.value
            fields = ArrayList()
            fields.add(S57dat.Fparams(S57field.VRID, arrayOf(130, hash(entry.key!!), 1, 1)))
            fields.add(
                S57dat.Fparams(
                    S57field.VRPT, arrayOf(
                        (hash(edge!!.first) and 0xffffffffL shl 8) + 120L, 255, 255, 1, 255,
                        (hash(edge.last) and 0xffffffffL shl 8) + 120L, 255, 255, 2, 255
                    )
                )
            )
            var nodes: Array<Any?>? = arrayOfNulls<Any?>(0)
            for (ref in edge.nodes!!) {
                val nval = arrayOf<Any?>(
                    rad2deg(map.nodes!![ref]!!.lat) * COMF, rad2deg(map.nodes!![ref]!!.lon) * COMF
                )
                nodes = Arrays.copyOf(nodes, nodes!!.size + nval.size)
                arraycopy(nval, 0, nodes, nodes.size - nval.size, nval.size)
            }
            if (nodes!!.isNotEmpty()) {
                fields.add(S57dat.Fparams(S57field.SG2D, nodes))
            }
            record = S57dat.encRecord(recs++, fields)
            arraycopy(record, 0, buf, idx, record.size)
            idx += record.size
            edges++
        }

        // Meta & Geo objects
        var soundings = false
        for (entry in map.features!!.entries) {
            val obj = entry.key
            for (feature in entry.value!!) {
                if (obj == Obj.SOUNDG) {
                    soundings = if (soundings) continue else true
                }
                var prim = feature!!.geom!!.prim!!.ordinal
                prim = if (prim == 0) 255 else prim
                val grup = when (obj) {
                    Obj.DEPARE, Obj.DRGARE, Obj.FLODOC, Obj.HULKES, Obj.LNDARE, Obj.PONTON, Obj.UNSARE -> 1
                    else -> 2
                }
                val geom = ArrayList<S57dat.Fparams?>()
                var outers = if (feature.geom!!.prim == S57map.Pflag.POINT) 1 else feature.geom!!.comps!![0]!!.size
                for (elem in feature.geom!!.elems!!) {
                    if (feature.geom!!.prim == S57map.Pflag.POINT) {
                        if (obj == Obj.SOUNDG) {
                            geom.add(
                                S57dat.Fparams(
                                    S57field.FSPT,
                                    arrayOf((-2 shl 8) + 110L, 255, 255, 255)
                                )
                            )
                        } else {
                            geom.add(
                                S57dat.Fparams(
                                    S57field.FSPT, arrayOf(
                                        (hash(elem!!.id) shl 8)
                                                + if (map.nodes!![elem.id]!!.flg == S57map.Nflag.CONN) 120L else 110L,
                                        255, 255, 255
                                    )
                                )
                            )
                        }
                    } else {
                        geom.add(
                            S57dat.Fparams(
                                S57field.FSPT,
                                arrayOf(
                                    (hash(elem!!.id) shl 8) + 130L,
                                    if (elem.forward) 1 else 2,
                                    if (outers-- > 0) 1 else 2,
                                    2
                                )
                            )
                        )
                    }
                }
                val objects = ArrayList<ArrayList<S57dat.Fparams>?>()
                val slaves = ArrayList<Long?>()
                var slaveid = feature.id + 0x0100000000000000L
                for (objs in feature.objs!!.entries) {
                    val objobj = objs.key
                    for (o in objs.value!!.entries) {
                        val objatts = ArrayList<S57dat.Fparams?>()
                        val master = feature.type == objobj && (o.key == 0 || o.key) == 1
                        val id = hash(if (master) feature.id else slaveid)
                        objatts.add(
                            S57dat.Fparams(
                                S57field.FRID,
                                arrayOf(100, id, prim, grup, S57obj.encodeType(objobj), 1, 1)
                            )
                        )
                        objatts.add(S57dat.Fparams(S57field.FOID, arrayOf(agen, id, 1)))
                        var attf: Array<Any?>? = arrayOfNulls<Any?>(0)
                        var natf: Array<Any?>? = arrayOfNulls<Any?>(0)
                        val atts = S57map.AttMap()
                        atts.putAll(o.value!!)
                        if (master) {
                            atts.putAll(feature.atts!!)
                        }
                        for (att in atts.entries) {
                            if ((obj == Obj.SOUNDG && att.key) != Att.VALSOU) {
                                val attl = S57att.encodeAttribute(att.key)!!.toLong()
                                val next = arrayOf<Any?>(
                                    attl, S57val.encodeValue(
                                        att.value, att.key
                                    )
                                )
                                if (attl < 300 || attl > 304) {
                                    attf = Arrays.copyOf(attf, attf!!.size + next.size)
                                    arraycopy(next, 0, attf, attf.size - next.size, next.size)
                                } else {
                                    natf = Arrays.copyOf(natf, natf!!.size + next.size)
                                    arraycopy(next, 0, natf, natf.size - next.size, next.size)
                                }
                            }
                        }
                        if (attf!!.isNotEmpty()) {
                            objatts.add(S57dat.Fparams(S57field.ATTF, attf))
                        }
                        if (natf!!.isNotEmpty()) {
                            objatts.add(S57dat.Fparams(S57field.NATF, attf))
                        }
                        if (master) {
                            objects.add(objatts)
                        } else {
                            slaves.add(id)
                            objects.add(0, objatts)
                            slaveid += 0x0100000000000000L
                        }
                    }
                }
                if (!slaves.isEmpty()) {
                    val refs = ArrayList<S57dat.Fparams?>()
                    var params: Array<Any?>? = arrayOfNulls<Any?>(0)
                    while (!slaves.isEmpty()) {
                        val id = slaves.removeAt(0)!!
                        val next =
                            arrayOf<Any?>((((id and 0xffffffffL) + 0x100000000L shl 16) + (agen and 0xffff)), 2, "")
                        params = Arrays.copyOf(params, params!!.size + next.size)
                        arraycopy(next, 0, params, params.size - next.size, next.size)
                    }
                    refs.add(S57dat.Fparams(S57field.FFPT, params))
                    objects[objects.size - 1]!!.addAll(refs)
                }
                for (o in objects) {
                    o!!.addAll(geom)
                    record = S57dat.encRecord(recs++, o)
                    arraycopy(record, 0, buf, idx, record.size)
                    idx += record.size
                    if (obj == Obj.M_COVR || obj == Obj.M_NSYS) metas++
                    else geos++
                }
            }
        }

        // Re-write DSID/DSSI with final totals
        ds = arrayListOf(
            S57dat.Fparams(
                S57field.DSID,
                arrayOf<Any>(
                    10,
                    1,
                    1,
                    intu,
                    file,
                    "1",
                    "0",
                    date,
                    date,
                    "03.1",
                    1,
                    "ENC",
                    "2.0",
                    1,
                    agen,
                    "Generated by OpenSeaMap.org"
                )
            )
        )
        ds.add(S57dat.Fparams(S57field.DSSI, arrayOf(2, 1, 2, metas, 0, geos, 0, isols, conns, edges, 0)))
        record = S57dat.encRecord(1, ds)
        arraycopy(record, 0, buf, header.size, record.size)
        return idx
    }
}